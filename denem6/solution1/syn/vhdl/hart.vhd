-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hart is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inst : IN STD_LOGIC_VECTOR (31 downto 0);
    pc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hart is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hart_hart,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.060167,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=139,HLS_SYN_LUT=1905,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv7_13 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv7_6F : STD_LOGIC_VECTOR (6 downto 0) := "1101111";
    constant ap_const_lv7_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce0 : STD_LOGIC;
    signal rf_we0 : STD_LOGIC;
    signal rf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rf_ce1 : STD_LOGIC;
    signal rf_we1 : STD_LOGIC;
    signal rf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal opcode_fu_320_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal opcode_reg_667 : STD_LOGIC_VECTOR (6 downto 0);
    signal rd_fu_324_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal rd_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs1_reg_681 : STD_LOGIC_VECTOR (4 downto 0);
    signal rs2_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal func3_reg_695 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp5_reg_701 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln34_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_424_p6 : STD_LOGIC_VECTOR (12 downto 0);
    signal offset_reg_712 : STD_LOGIC_VECTOR (12 downto 0);
    signal imm_20_U_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm_20_U_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln80_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln67_5_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln67_4_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_3_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_2_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_1_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_pc_1_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OP_AL_32I_fu_278_ap_ready : STD_LOGIC;
    signal grp_OP_AL_32I_fu_278_opcode_val : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_OP_AL_32I_fu_278_op1_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OP_AL_32I_fu_278_op2_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_OP_AL_32I_fu_278_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_next_pc_5_phi_fu_250_p24 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_pc_5_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_pc_3_fu_491_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_pc_4_fu_480_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_1_fu_629_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln42_fu_642_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln78_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln79_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln70_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln67_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln62_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_1_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln58_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln53_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal imm_11_0_fu_374_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_388_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_414_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_404_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_438_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal next_pc_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln74_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnval_6_fu_545_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal returnval_5_fu_556_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln72_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnval_4_fu_573_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal returnval_3_fu_584_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln70_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnval_2_fu_601_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln69_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal returnval_1_fu_618_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_310_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hart_OP_AL_32I IS
    port (
        ap_ready : OUT STD_LOGIC;
        opcode_val : IN STD_LOGIC_VECTOR (5 downto 0);
        func7_val : IN STD_LOGIC_VECTOR (6 downto 0);
        func3_val : IN STD_LOGIC_VECTOR (2 downto 0);
        op1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        op2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hart_rf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rf_U : component hart_rf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rf_address0,
        ce0 => rf_ce0,
        we0 => rf_we0,
        d0 => rf_d0,
        q0 => rf_q0,
        address1 => rf_address1,
        ce1 => rf_ce1,
        we1 => rf_we1,
        d1 => rf_d1,
        q1 => rf_q1);

    grp_OP_AL_32I_fu_278 : component hart_OP_AL_32I
    port map (
        ap_ready => grp_OP_AL_32I_fu_278_ap_ready,
        opcode_val => grp_OP_AL_32I_fu_278_opcode_val,
        func7_val => tmp5_reg_701,
        func3_val => func3_reg_695,
        op1_val => grp_OP_AL_32I_fu_278_op1_val,
        op2_val => grp_OP_AL_32I_fu_278_op2_val,
        ap_return => grp_OP_AL_32I_fu_278_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    next_pc_5_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (((opcode_reg_667 = ap_const_lv7_37) or ((opcode_reg_667 = ap_const_lv7_13) and (trunc_ln42_1_fu_629_p1 = ap_const_lv1_0))) or ((opcode_reg_667 = ap_const_lv7_33) and (trunc_ln42_fu_642_p1 = ap_const_lv1_0))))) then 
                next_pc_5_reg_245 <= grp_fu_292_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and ((((opcode_reg_667 = ap_const_lv7_17) or (not((opcode_reg_667 = ap_const_lv7_6F)) and not((opcode_reg_667 = ap_const_lv7_37)) and not((opcode_reg_667 = ap_const_lv7_13)) and not((opcode_reg_667 = ap_const_lv7_33)) and not((opcode_reg_667 = ap_const_lv7_67)) and not((opcode_reg_667 = ap_const_lv7_63)))) or ((opcode_reg_667 = ap_const_lv7_13) and (trunc_ln42_1_fu_629_p1 = ap_const_lv1_1))) or ((opcode_reg_667 = ap_const_lv7_33) and (trunc_ln42_fu_642_p1 = ap_const_lv1_1))))) then 
                next_pc_5_reg_245 <= next_pc_1_fu_655_p2;
            elsif (((icmp_ln80_reg_737 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                next_pc_5_reg_245 <= next_pc_4_fu_480_p4;
            elsif (((icmp_ln80_reg_737 = ap_const_lv1_1) and (opcode_reg_667 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                next_pc_5_reg_245 <= next_pc_3_fu_491_p4;
            elsif (((func3_reg_695 = ap_const_lv3_0) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_fu_625_p1;
            elsif (((func3_reg_695 = ap_const_lv3_1) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_1_fu_608_p1;
            elsif (((func3_reg_695 = ap_const_lv3_4) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_2_fu_591_p1;
            elsif (((func3_reg_695 = ap_const_lv3_5) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_3_fu_580_p1;
            elsif (((func3_reg_695 = ap_const_lv3_6) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_4_fu_563_p1;
            elsif (((func3_reg_695 = ap_const_lv3_7) and (opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                next_pc_5_reg_245 <= sext_ln67_5_fu_552_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((func3_reg_695 = ap_const_lv3_2) and (opcode_reg_667 = ap_const_lv7_63)) or ((func3_reg_695 = ap_const_lv3_3) and (opcode_reg_667 = ap_const_lv7_63))))) then 
                next_pc_5_reg_245 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                func3_reg_695 <= inst(14 downto 12);
                icmp_ln53_reg_728 <= icmp_ln53_fu_456_p2;
                    imm_20_U_reg_722(31 downto 12) <= imm_20_U_fu_448_p3(31 downto 12);
                    offset_reg_712(12 downto 1) <= offset_fu_424_p6(12 downto 1);
                opcode_reg_667 <= opcode_fu_320_p1;
                rd_reg_671 <= inst(11 downto 7);
                rs1_reg_681 <= inst(19 downto 15);
                rs2_reg_689 <= inst(24 downto 20);
                sext_ln34_reg_706 <= sext_ln34_fu_384_p1;
                tmp5_reg_701 <= inst(31 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln80_reg_737 <= icmp_ln80_fu_470_p2;
            end if;
        end if;
    end process;
    offset_reg_712(0) <= '0';
    imm_20_U_reg_722(11 downto 0) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, opcode_fu_320_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((opcode_fu_320_p1 = ap_const_lv7_37) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((opcode_fu_320_p1 = ap_const_lv7_17) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((opcode_fu_320_p1 = ap_const_lv7_6F) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((opcode_fu_320_p1 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((opcode_fu_320_p1 = ap_const_lv7_67)) and not((opcode_fu_320_p1 = ap_const_lv7_6F)) and not((opcode_fu_320_p1 = ap_const_lv7_17)) and not((opcode_fu_320_p1 = ap_const_lv7_37)) and not((opcode_fu_320_p1 = ap_const_lv7_33)) and not((opcode_fu_320_p1 = ap_const_lv7_13)) and not((opcode_fu_320_p1 = ap_const_lv7_63)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((opcode_fu_320_p1 = ap_const_lv7_33) or ((opcode_fu_320_p1 = ap_const_lv7_13) or (opcode_fu_320_p1 = ap_const_lv7_63))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln70_fu_506_p2 <= std_logic_vector(unsigned(imm_20_U_reg_722) + unsigned(pc));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_next_pc_5_phi_fu_250_p24_assign_proc : process(opcode_reg_667, icmp_ln80_reg_737, next_pc_5_reg_245, next_pc_3_fu_491_p4, ap_CS_fsm_state4, next_pc_4_fu_480_p4)
    begin
        if (((opcode_reg_667 = ap_const_lv7_67) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((icmp_ln80_reg_737 = ap_const_lv1_0)) then 
                ap_phi_mux_next_pc_5_phi_fu_250_p24 <= next_pc_4_fu_480_p4;
            elsif ((icmp_ln80_reg_737 = ap_const_lv1_1)) then 
                ap_phi_mux_next_pc_5_phi_fu_250_p24 <= next_pc_3_fu_491_p4;
            else 
                ap_phi_mux_next_pc_5_phi_fu_250_p24 <= next_pc_5_reg_245;
            end if;
        else 
            ap_phi_mux_next_pc_5_phi_fu_250_p24 <= next_pc_5_reg_245;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_next_pc_5_phi_fu_250_p24;

    grp_OP_AL_32I_fu_278_op1_val_assign_proc : process(rf_q0, rf_q1, opcode_reg_667, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
            if ((opcode_reg_667 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_278_op1_val <= rf_q1;
            elsif ((opcode_reg_667 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_278_op1_val <= rf_q0;
            else 
                grp_OP_AL_32I_fu_278_op1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_278_op1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_OP_AL_32I_fu_278_op2_val_assign_proc : process(rf_q0, opcode_reg_667, sext_ln34_reg_706, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
            if ((opcode_reg_667 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_278_op2_val <= rf_q0;
            elsif ((opcode_reg_667 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_278_op2_val <= sext_ln34_reg_706;
            else 
                grp_OP_AL_32I_fu_278_op2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_278_op2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_OP_AL_32I_fu_278_opcode_val_assign_proc : process(opcode_reg_667, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
            if ((opcode_reg_667 = ap_const_lv7_33)) then 
                grp_OP_AL_32I_fu_278_opcode_val <= ap_const_lv6_33;
            elsif ((opcode_reg_667 = ap_const_lv7_13)) then 
                grp_OP_AL_32I_fu_278_opcode_val <= ap_const_lv6_13;
            else 
                grp_OP_AL_32I_fu_278_opcode_val <= "XXXXXX";
            end if;
        else 
            grp_OP_AL_32I_fu_278_opcode_val <= "XXXXXX";
        end if; 
    end process;

    grp_fu_292_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_4));
    grp_fu_298_p2 <= "1" when (unsigned(rf_q1) < unsigned(rf_q0)) else "0";
    grp_fu_304_p2 <= "1" when (signed(rf_q1) < signed(rf_q0)) else "0";
    grp_fu_310_p4 <= grp_OP_AL_32I_fu_278_ap_return(31 downto 1);
    icmp_ln53_fu_456_p2 <= "1" when (rd_fu_324_p4 = ap_const_lv5_0) else "0";
    icmp_ln69_fu_612_p2 <= "1" when (rf_q1 = rf_q0) else "0";
    icmp_ln70_fu_595_p2 <= "0" when (rf_q1 = rf_q0) else "1";
    icmp_ln80_fu_470_p2 <= "1" when (func3_reg_695 = ap_const_lv3_0) else "0";
    imm_11_0_fu_374_p4 <= inst(31 downto 20);
    imm_20_U_fu_448_p3 <= (tmp_5_fu_438_p4 & ap_const_lv12_0);
    next_pc_1_fu_655_p2 <= std_logic_vector(unsigned(pc) + unsigned(ap_const_lv32_5));
    
    next_pc_3_fu_491_p4_proc : process(next_pc_fu_475_p2)
    begin
        next_pc_3_fu_491_p4 <= next_pc_fu_475_p2;
        next_pc_3_fu_491_p4(0) <= ap_const_lv1_0(0);
    end process;

    
    next_pc_4_fu_480_p4_proc : process(next_pc_fu_475_p2)
    begin
        next_pc_4_fu_480_p4 <= next_pc_fu_475_p2;
        next_pc_4_fu_480_p4(0) <= ap_const_lv1_1(0);
    end process;

    next_pc_fu_475_p2 <= std_logic_vector(unsigned(rf_q0) + unsigned(sext_ln34_reg_706));
    offset_fu_424_p6 <= ((((tmp_1_fu_396_p3 & tmp_fu_388_p3) & tmp_2_fu_414_p4) & tmp_4_fu_404_p4) & ap_const_lv1_0);
    opcode_fu_320_p1 <= inst(7 - 1 downto 0);
    rd_fu_324_p4 <= inst(11 downto 7);
    returnval_1_fu_618_p3 <= 
        offset_reg_712 when (icmp_ln69_fu_612_p2(0) = '1') else 
        ap_const_lv13_4;
    returnval_2_fu_601_p3 <= 
        offset_reg_712 when (icmp_ln70_fu_595_p2(0) = '1') else 
        ap_const_lv13_4;
    returnval_3_fu_584_p3 <= 
        offset_reg_712 when (grp_fu_304_p2(0) = '1') else 
        ap_const_lv13_4;
    returnval_4_fu_573_p3 <= 
        offset_reg_712 when (xor_ln72_fu_567_p2(0) = '1') else 
        ap_const_lv13_4;
    returnval_5_fu_556_p3 <= 
        offset_reg_712 when (grp_fu_298_p2(0) = '1') else 
        ap_const_lv13_4;
    returnval_6_fu_545_p3 <= 
        offset_reg_712 when (xor_ln74_fu_539_p2(0) = '1') else 
        ap_const_lv13_4;

    rf_address0_assign_proc : process(ap_CS_fsm_state1, opcode_reg_667, ap_CS_fsm_state3, ap_CS_fsm_state8, zext_ln78_fu_462_p1, ap_CS_fsm_state2, zext_ln79_fu_466_p1, zext_ln73_fu_502_p1, ap_CS_fsm_state5, zext_ln70_fu_511_p1, ap_CS_fsm_state6, zext_ln67_fu_515_p1, ap_CS_fsm_state7, zext_ln62_1_fu_523_p1, zext_ln57_fu_527_p1, zext_ln52_1_fu_535_p1)
    begin
        if (((opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rf_address0 <= zext_ln52_1_fu_535_p1(5 - 1 downto 0);
        elsif (((opcode_reg_667 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rf_address0 <= zext_ln57_fu_527_p1(5 - 1 downto 0);
        elsif (((opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rf_address0 <= zext_ln62_1_fu_523_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rf_address0 <= zext_ln67_fu_515_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rf_address0 <= zext_ln70_fu_511_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rf_address0 <= zext_ln73_fu_502_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rf_address0 <= zext_ln79_fu_466_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rf_address0 <= zext_ln78_fu_462_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_address0 <= ap_const_lv5_0;
        else 
            rf_address0 <= "XXXXX";
        end if; 
    end process;


    rf_address1_assign_proc : process(opcode_reg_667, icmp_ln53_reg_728, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln62_fu_519_p1, zext_ln52_fu_531_p1, zext_ln58_fu_638_p1, zext_ln53_fu_651_p1)
    begin
        if (((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            rf_address1 <= zext_ln53_fu_651_p1(5 - 1 downto 0);
        elsif (((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            rf_address1 <= zext_ln58_fu_638_p1(5 - 1 downto 0);
        elsif (((opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rf_address1 <= zext_ln52_fu_531_p1(5 - 1 downto 0);
        elsif (((opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rf_address1 <= zext_ln62_fu_519_p1(5 - 1 downto 0);
        else 
            rf_address1 <= "XXXXX";
        end if; 
    end process;


    rf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, opcode_reg_667, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((opcode_reg_667 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            rf_ce0 <= ap_const_logic_1;
        else 
            rf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_ce1_assign_proc : process(opcode_reg_667, icmp_ln53_reg_728, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((opcode_reg_667 = ap_const_lv7_63) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            rf_ce1 <= ap_const_logic_1;
        else 
            rf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rf_d0_assign_proc : process(ap_CS_fsm_state1, imm_20_U_reg_722, grp_fu_292_p2, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, add_ln70_fu_506_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rf_d0 <= imm_20_U_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rf_d0 <= add_ln70_fu_506_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rf_d0 <= grp_fu_292_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rf_d0 <= ap_const_lv32_0;
        else 
            rf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_d1_assign_proc : process(opcode_reg_667, icmp_ln53_reg_728, ap_CS_fsm_state9, sext_ln58_fu_633_p1, sext_ln53_fu_646_p1)
    begin
        if (((icmp_ln53_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
            if ((opcode_reg_667 = ap_const_lv7_33)) then 
                rf_d1 <= sext_ln53_fu_646_p1;
            elsif ((opcode_reg_667 = ap_const_lv7_13)) then 
                rf_d1 <= sext_ln58_fu_633_p1;
            else 
                rf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            rf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rf_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln53_reg_728, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            rf_we0 <= ap_const_logic_1;
        else 
            rf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rf_we1_assign_proc : process(opcode_reg_667, icmp_ln53_reg_728, ap_CS_fsm_state9)
    begin
        if ((((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_13) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln53_reg_728 = ap_const_lv1_0) and (opcode_reg_667 = ap_const_lv7_33) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            rf_we1 <= ap_const_logic_1;
        else 
            rf_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln34_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imm_11_0_fu_374_p4),32));

        sext_ln53_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_310_p4),32));

        sext_ln58_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_310_p4),32));

        sext_ln67_1_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_2_fu_601_p3),32));

        sext_ln67_2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_3_fu_584_p3),32));

        sext_ln67_3_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_4_fu_573_p3),32));

        sext_ln67_4_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_5_fu_556_p3),32));

        sext_ln67_5_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_6_fu_545_p3),32));

        sext_ln67_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(returnval_1_fu_618_p3),32));

    tmp_1_fu_396_p3 <= inst(31 downto 31);
    tmp_2_fu_414_p4 <= inst(30 downto 25);
    tmp_4_fu_404_p4 <= inst(11 downto 8);
    tmp_5_fu_438_p4 <= inst(31 downto 12);
    tmp_fu_388_p3 <= inst(7 downto 7);
    trunc_ln42_1_fu_629_p1 <= grp_OP_AL_32I_fu_278_ap_return(1 - 1 downto 0);
    trunc_ln42_fu_642_p1 <= grp_OP_AL_32I_fu_278_ap_return(1 - 1 downto 0);
    xor_ln72_fu_567_p2 <= (grp_fu_304_p2 xor ap_const_lv1_1);
    xor_ln74_fu_539_p2 <= (grp_fu_298_p2 xor ap_const_lv1_1);
    zext_ln52_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs2_reg_689),64));
    zext_ln52_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_681),64));
    zext_ln53_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln57_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_681),64));
    zext_ln58_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln62_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs2_reg_689),64));
    zext_ln62_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_681),64));
    zext_ln67_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln70_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln73_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln78_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rd_reg_671),64));
    zext_ln79_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rs1_reg_681),64));
end behav;
